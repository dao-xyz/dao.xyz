diff --git a/node_modules/logplease/es5/index.js b/node_modules/logplease/es5/index.js
index 9e3da56..896f101 100644
--- a/node_modules/logplease/es5/index.js
+++ b/node_modules/logplease/es5/index.js
@@ -22,8 +22,8 @@ var fs = require('fs');
 var format = require('util').format;
 var EventEmitter = require('events').EventEmitter;
 
-var isElectronRenderer = process.type && process.type === 'renderer';
-var isNodejs = !isElectronRenderer && process.version ? true : false;
+var isElectronRenderer = (typeof process !== 'undefined') && process.type === 'renderer';
+var isNodejs = !isElectronRenderer && (typeof process !== 'undefined') && process.version ? true : false;
 
 var LogLevels = {
   'DEBUG': 'DEBUG',
diff --git a/node_modules/logplease/src/index.js b/node_modules/logplease/src/index.js
index 313b44e..4925025 100644
--- a/node_modules/logplease/src/index.js
+++ b/node_modules/logplease/src/index.js
@@ -4,15 +4,15 @@ const fs = require('fs');
 const format = require('util').format;
 const EventEmitter = require('events').EventEmitter;
 
-let isElectronRenderer = process.type && process.type === 'renderer';
-let isNodejs = !isElectronRenderer && process.version ? true : false;
+var isElectronRenderer = (typeof process !== 'undefined') && process.type === 'renderer';
+var isNodejs = !isElectronRenderer && (typeof process !== 'undefined') && process.version ? true : false;
 
 const LogLevels = {
   'DEBUG': 'DEBUG',
-  'INFO':  'INFO',
-  'WARN':  'WARN',
+  'INFO': 'INFO',
+  'WARN': 'WARN',
   'ERROR': 'ERROR',
-  'NONE':  'NONE',
+  'NONE': 'NONE',
 };
 
 // Global log level
@@ -25,30 +25,30 @@ let GlobalEvents = new EventEmitter();
 
 // ANSI colors
 let Colors = {
-  'Black':   0,
-  'Red':     1,
-  'Green':   2,
-  'Yellow':  3,
-  'Blue':    4,
+  'Black': 0,
+  'Red': 1,
+  'Green': 2,
+  'Yellow': 3,
+  'Blue': 4,
   'Magenta': 5,
-  'Cyan':    6,
-  'Grey':    7,
-  'White':   9,
+  'Cyan': 6,
+  'Grey': 7,
+  'White': 9,
   'Default': 9,
 };
 
 // CSS colors
-if(!isNodejs) {
+if (!isNodejs) {
   Colors = {
-    'Black':   'Black',
-    'Red':     'IndianRed',
-    'Green':   'LimeGreen',
-    'Yellow':  'Orange',
-    'Blue':    'RoyalBlue',
+    'Black': 'Black',
+    'Red': 'IndianRed',
+    'Green': 'LimeGreen',
+    'Yellow': 'Orange',
+    'Blue': 'RoyalBlue',
     'Magenta': 'Orchid',
-    'Cyan':    'SkyBlue',
-    'Grey':    'DimGrey',
-    'White':   'White',
+    'Cyan': 'SkyBlue',
+    'Grey': 'DimGrey',
+    'White': 'White',
     'Default': 'Black',
   };
 }
@@ -80,62 +80,62 @@ class Logger {
   }
 
   debug() {
-    if(this._shouldLog(LogLevels.DEBUG))
+    if (this._shouldLog(LogLevels.DEBUG))
       this._write(LogLevels.DEBUG, format.apply(null, arguments));
   }
 
   log() {
-    if(this._shouldLog(LogLevels.DEBUG))
+    if (this._shouldLog(LogLevels.DEBUG))
       this.debug.apply(this, arguments);
   }
 
   info() {
-    if(this._shouldLog(LogLevels.INFO))
+    if (this._shouldLog(LogLevels.INFO))
       this._write(LogLevels.INFO, format.apply(null, arguments));
   }
 
   warn() {
-    if(this._shouldLog(LogLevels.WARN))
+    if (this._shouldLog(LogLevels.WARN))
       this._write(LogLevels.WARN, format.apply(null, arguments));
   }
 
   error() {
-    if(this._shouldLog(LogLevels.ERROR))
+    if (this._shouldLog(LogLevels.ERROR))
       this._write(LogLevels.ERROR, format.apply(null, arguments));
   }
 
   _write(level, text) {
-    if((this.options.filename || GlobalLogfile) && !this.fileWriter && isNodejs)
+    if ((this.options.filename || GlobalLogfile) && !this.fileWriter && isNodejs)
       this.fileWriter = fs.openSync(this.options.filename || GlobalLogfile, this.options.appendFile ? 'a+' : 'w+');
 
     let format = this._format(level, text);
     let unformattedText = this._createLogMessage(level, text);
     let formattedText = this._createLogMessage(level, text, format.timestamp, format.level, format.category, format.text);
 
-    if(this.fileWriter && isNodejs)
+    if (this.fileWriter && isNodejs)
       fs.writeSync(this.fileWriter, unformattedText + '\n', null, 'utf-8');
 
-    if(isNodejs || !this.options.useColors) {
+    if (isNodejs || !this.options.useColors) {
       console.log(formattedText)
       GlobalEvents.emit('data', this.category, level, text)
     } else {
       // TODO: clean this up
-      if(level === LogLevels.ERROR) {
-        if(this.options.showTimestamp && this.options.showLevel) {
+      if (level === LogLevels.ERROR) {
+        if (this.options.showTimestamp && this.options.showLevel) {
           console.error(formattedText, format.timestamp, format.level, format.category, format.text)
-        } else if(this.options.showTimestamp && !this.options.showLevel) {
+        } else if (this.options.showTimestamp && !this.options.showLevel) {
           console.error(formattedText, format.timestamp, format.category, format.text)
-        } else if(!this.options.showTimestamp && this.options.showLevel) {
+        } else if (!this.options.showTimestamp && this.options.showLevel) {
           console.error(formattedText, format.level, format.category, format.text)
         } else {
           console.error(formattedText, format.category, format.text)
         }
       } else {
-        if(this.options.showTimestamp && this.options.showLevel) {
+        if (this.options.showTimestamp && this.options.showLevel) {
           console.log(formattedText, format.timestamp, format.level, format.category, format.text)
-        } else if(this.options.showTimestamp && !this.options.showLevel) {
+        } else if (this.options.showTimestamp && !this.options.showLevel) {
           console.log(formattedText, format.timestamp, format.category, format.text)
-        } else if(!this.options.showTimestamp && this.options.showLevel) {
+        } else if (!this.options.showTimestamp && this.options.showLevel) {
           console.log(formattedText, format.level, format.category, format.text)
         } else {
           console.log(formattedText, format.category, format.text)
@@ -146,28 +146,28 @@ class Logger {
 
   _format(level, text) {
     let timestampFormat = '';
-    let levelFormat     = '';
-    let categoryFormat  = '';
-    let textFormat      = ': ';
+    let levelFormat = '';
+    let categoryFormat = '';
+    let textFormat = ': ';
 
-    if(this.options.useColors) {
-        const levelColor    = Object.keys(LogLevels).map((f) => LogLevels[f]).indexOf(level);
-        const categoryColor = this.options.color;
+    if (this.options.useColors) {
+      const levelColor = Object.keys(LogLevels).map((f) => LogLevels[f]).indexOf(level);
+      const categoryColor = this.options.color;
 
-      if(isNodejs) {
-        if(this.options.showTimestamp)
+      if (isNodejs) {
+        if (this.options.showTimestamp)
           timestampFormat = '\u001b[3' + Colors.Grey + 'm';
 
-        if(this.options.showLevel)
+        if (this.options.showLevel)
           levelFormat = '\u001b[3' + loglevelColors[levelColor] + ';22m';
 
         categoryFormat = '\u001b[3' + categoryColor + ';1m';
         textFormat = '\u001b[0m: ';
       } else {
-        if(this.options.showTimestamp)
+        if (this.options.showTimestamp)
           timestampFormat = 'color:' + Colors.Grey;
 
-        if(this.options.showLevel)
+        if (this.options.showLevel)
           levelFormat = 'color:' + loglevelColors[levelColor];
 
         categoryFormat = 'color:' + categoryColor + '; font-weight: bold';
@@ -184,33 +184,33 @@ class Logger {
 
   _createLogMessage(level, text, timestampFormat, levelFormat, categoryFormat, textFormat) {
     timestampFormat = timestampFormat || '';
-    levelFormat     = levelFormat     || '';
-    categoryFormat  = categoryFormat  || '';
-    textFormat      = textFormat      || ': ';
+    levelFormat = levelFormat || '';
+    categoryFormat = categoryFormat || '';
+    textFormat = textFormat || ': ';
 
-    if(!isNodejs && this.options.useColors) {
-      if(this.options.showTimestamp)
+    if (!isNodejs && this.options.useColors) {
+      if (this.options.showTimestamp)
         timestampFormat = '%c';
 
-      if(this.options.showLevel)
+      if (this.options.showLevel)
         levelFormat = '%c';
 
-      categoryFormat  = '%c';
+      categoryFormat = '%c';
       textFormat = ': %c';
     }
 
     let result = '';
 
-    if(this.options.showTimestamp && !this.options.useLocalTime)
+    if (this.options.showTimestamp && !this.options.useLocalTime)
       result += '' + new Date().toISOString() + ' ';
 
-    if(this.options.showTimestamp && this.options.useLocalTime)
+    if (this.options.showTimestamp && this.options.useLocalTime)
       result += '' + new Date().toLocaleString() + ' ';
 
     result = timestampFormat + result;
 
-    if(this.options.showLevel)
-      result += levelFormat + '[' + level +']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';
+    if (this.options.showLevel)
+      result += levelFormat + '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';
 
     result += categoryFormat + this.category;
     result += textFormat + text;
@@ -222,8 +222,8 @@ class Logger {
     envLogLevel = (typeof window !== "undefined" && window.LOG) ? window.LOG.toUpperCase() : envLogLevel;
 
     const logLevel = envLogLevel || GlobalLogLevel;
-    const levels   = Object.keys(LogLevels).map((f) => LogLevels[f]);
-    const index    = levels.indexOf(level);
+    const levels = Object.keys(LogLevels).map((f) => LogLevels[f]);
+    const index = levels.indexOf(level);
     const levelIdx = levels.indexOf(logLevel);
     return index >= levelIdx;
   }
